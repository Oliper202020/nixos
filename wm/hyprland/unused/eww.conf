(defwindow bar0
  :monitor 0
  :windowtype "dock"
  :geometry (geometry 
    :x "0%"
    :y "0%"
    :width "100%"
    :height "32px"
    :anchor "top center"
  )
  :reserve (struts :side "top" :distance "32px")
  :exclusive true
  (box :class "bar"
    (left_section_bar0)
    (window_sway)
    (right_section0)
  )
)



(defwidget left_section_bar0 []
  (box :class "left_section_bar0" :orientation "h" :space-evenly false :halign "start"
    (time_w)
    (caffeine_w)
    (brightness_w)
    (battery_w)
    (workspaces0)
  )
)

(defwidget right_section0 []
  (box :class "right_section" :orientation "h" :space-evenly false :halign "end"
    (container
			(systray :class "tray" :spacing 5 :icon-size 16)
		)
    (volume_h)
    (volume_m)
    (lang)
  )
)


(deflisten workspace0 "~/.config/eww/scripts/swayworkspacers eDP-1")

(defwidget workspaces0 []
  (eventbox
    (box :class "workspaces"
      :space-evenly false
      (for i in workspace0
        (button
          :onclick "sway workspace ${i.id}"
          :class "${i.class}"
          "${i.name}"
        )
      )
    )
  )
)

(deflisten titlesway "~/.config/eww/scripts/swaytitlers eDP-1")
(defwidget window_sway []
  (box :halign "center"
    (revealer
      :reveal {titlesway != ""}
      :transition "none"
      (label
        :class "window_w"
        :limit-width 40
        :text "${titlesway}"
      )
    )
  )
)

(defvar caffeine false)

(defwidget caffeine_w []
  (eventbox
    :orientation "h"
    (box
      :space-evenly "false"
      :halign "center"
      (revealer
        :reveal caffeine
        :transition "slideleft"
        :duration "200ms"
        (button
          :onclick "eww update caffeine=false; bash ~/.config/sway/sleep.sh &"
          (label
            :class "caffeine_on"
            :text ""
          )
        )
      )
      (revealer
        :reveal {caffeine == false}
        :transition "slideleft"
        :duration "200ms"
        (button
          :onclick "eww update caffeine=true;killall swayidle &"
          (label
            :class "caffeine_off"
            :text ""
          )
        )
      )
    )
  )
)


(defpoll volume :interval "100ms" "scripts/getvol")

(defwidget volume_h []
  (eventbox
    :orientation "h"
    :onscroll "if [ '{}' == 'up' ]; then pactl set-sink-volume alsa_output.pci-0000_03_00.6.analog-stereo +5%; else pactl set-sink-volume alsa_output.pci-0000_03_00.6.analog-stereo -5%; fi"
    (button
      :onclick "pamixer -t --sink @DEFAULT_SINK@"
      :onrightclick "pavucontrol &"
      (box
        :space-evenly "false"
        :halign "center"
        (revealer
          :reveal {volume == ""}
          :transition "slideleft"
          :duration "200ms"
          (label
            :class "volume_mute"
            :text ""
          )
        )
        (revealer
          :reveal {volume != ""}
          :transition "slideright"
          :duration "200ms"
          (label
            :class "volume_ok"
            :text "${volume}"
          )
        )
      )
    )
  )
)

(defpoll brightness :interval "100ms" "echo $((($(brightnessctl g) * 100) / 255))")
(defwidget brightness_w[]
  (eventbox
    :orientation "h"
    :onscroll "if [ '{}' == 'up' ]; then brightnessctl set 5%+; else brightnessctl set 5%-; fi"
    (button
      (box
        :space-evenly "false"
        :halign "center"
	      (label
            :class "time_w"
            :text " ${brightness}"
        )
      )
    )
  )
)

(defpoll battery :interval "1s" "scripts/getbat")
(defwidget battery_w[]
  (eventbox
    :orientation "h"
    (button
      (box
        :space-evenly "false"
        :halign "center" 
	      (label
	  	    :class "time_w"
		      :text  "${battery}"
	      )
      )
    )
  )
)

(defpoll volume_mic :interval "100ms" "scripts/getmic")

(defwidget volume_m []
  (eventbox
    :orientation "h"
    (button
      :onclick "pamixer -t --source easyeffects_source"
      :onrightclick "pavucontrol &"
      (box
        :space-evenly "false"
        :halign "center"
        (revealer
          :reveal {volume_mic == ""}
          :transition "slideleft"
          :duration "200ms"
          (label
            :class "volume_mute"
            :text ""
          )
        )
        (revealer
          :reveal {volume_mic != ""}
          :transition "slideright"
          :duration "200ms"
          (label
            :class "volume_ok"
            :text " ${volume_mic}"
          )
        )
      )
    )
  )
)

(defpoll time :interval "10s" "date +'%R'")
(defpoll time_pm :interval "10s" "date +'%I:%M %p'")
(defpoll date :interval "60s" "date +'%a %d, %b(%m), %Y'")

(defvar pm false)

(defwidget time_w []
  (eventbox
    :orientation "h"
    (box
      :space-evenly false
      :halign "center"
      (revealer
        :reveal pm 
        :transition "slideleft"
        :duration "200ms"
        (button
          :onclick "eww update pm=false"
          :onrightclick "gnome-calendar &"
          :tooltip "${date}"
          (label :class "time_w_pm" :text "${time_pm}" )
        )
      )
      (revealer
        :reveal {pm == false}
        :transition "slideleft"
        :duration "200ms"
        (button
          :onclick "eww update pm=true"
          :onrightclick "gnome-calendar &"
          :tooltip "${date}"
          (label :class "time_w" :text "${time}" )
        )
      )
    )
  )
)



(defvar en_reveal true)
(defvar jp_reveal false)

(defwidget lang []
  (eventbox
    :orientation "h"
    (button
      (box
        :space-evenly "false"
        :halign "center"
        (revealer
          :reveal en_reveal
          :transition "slideleft"
          :duration "200ms"
          (label :class "lang_en" :text " en" )
        )
        (revealer
          :reveal jp_reveal
          :transition "slideleft"
          :duration "200ms"
          (label :class "lang_jp" :text " jp" )
        )
      )
    )
  )
)

(defwidget container [?nopadding]
  (box
    :class "container"
    :style "padding: ${nopadding == true ? "0px" : "0px 0px 0px 0px"}"
    :orientation "horizontal"
    :halign "end"
    :space-evenly false
    (children)
  )
)
